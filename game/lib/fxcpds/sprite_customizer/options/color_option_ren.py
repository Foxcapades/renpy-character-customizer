import renpy  # type: ignore
from renpy.store import DynamicDisplayable, Solid  # type: ignore

from .option_ren import SCOption, SC_OPTION_TYPE_COLOR
from ..color_picker.fox_color_ren import FoxColor, hex_to_fox_rgb, FoxRGB

"""renpy
init -1 python:
"""


class SCColorOption(SCOption):
    """
    # Sprite Customizer Color Option

    Represents a color selection option represented by a color hex code string.

    This option is intended to be used with a color picker type UI.

    ```python
    SCColorOption("my_option", "My Option", "My Group", "#ff0000")
    ```

    **IMPORTANT**: This option type is state dependent and cannot be used on its
    own, it **MUST** be registered to an SCLayer instance to be in any way
    useful.
    """

    def __init__(
        self,
        key: str,
        name: str,
        group: str | None,
        default: str | FoxColor,
    ):
        """
        Initializes the new SCColorOption with the given arguments.

        Arguments
        ---------
        key : str
            Key for this option.

        name : str
            Display name for this option.

        group : str | None
            Option group.  If this value is set to `None`, the `name` value will
            be used as the group name.

        default : str | FoxColor
            Default color value to use when no selection has yet been made by
            the user.
        """
        from uuid import uuid4
        super().__init__(key, name, group, SC_OPTION_TYPE_COLOR)

        if isinstance(default, str):
            tmp = hex_to_fox_rgb(default)
            tmp.set_alpha(1.0)
            self._default = tmp.hex
        elif isinstance(default, FoxColor):
            self._default = default.hex
        else:
            raise Exception('"default" must be a string or a FoxColor instance.')

        self._image_name = str(uuid4())

    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
    #
    #   Properties
    #
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

    @property
    def preview_image_name(self):
        """
        str
            The name of the preview image that was generated by this
            SCColorOption instance.  The returned image is controlled by this
            option's `selection_value`.
        """
        return self._image_name

    @property
    def selection_value(self) -> str:
        """
        str
            The current selection value for this SCColorOption instance.  This
            value will be a hex color string.
        """
        if not self._req_state().has_selection(self._key):
            self._state.set_selection(self._key, self._default)

        return self._state.get_selection(self._key)

    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
    #
    #   SC-Internal Methods
    #
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

    def _clone(self):
        return SCColorOption(self._key, self._name, self._group, self._default)

    def _post_clone(self):
        renpy.image(self._image_name, DynamicDisplayable(self._color_cb))

    # noinspection PyUnusedLocal
    def _color_cb(self, st: float, at: float):
        return Solid(self.selection_value), 0.0

    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
    #
    #   Public Methods
    #
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

    def set_selection(self, value: str):
        """
        Sets the selection to the given value if and only if it is a valid hex
        color string.

        If the given value is _not_ a valid hex color string, this method will
        raise an exception.

        Arguments
        ---------
        value : str
            Hex color string to set.
        """
        if not isinstance(value, str):
            raise Exception('"value" must be a hex string')

        tmp = hex_to_fox_rgb(value)
        tmp.set_alpha(1.0)
        self._req_state().set_selection(self._key, tmp.hex)

    def randomize(self):
        """
        Selects a "random" color option and sets the user selection to that
        value.
        """
        self._req_state().set_selection(self._key, FoxRGB(
            renpy.random.randint(0, 255),
            renpy.random.randint(0, 255),
            renpy.random.randint(0, 255),
        ).hex)
